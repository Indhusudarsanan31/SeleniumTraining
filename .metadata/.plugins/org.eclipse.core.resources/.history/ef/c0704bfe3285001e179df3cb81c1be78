package org.samp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import io.github.bonigarcia.wdm.WebDriverManager;

public class BaseClass1 {

	public static WebDriver driver;

	public static void launchBrowser() {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();
	}

	public static void windowMaximize() {
		driver.manage().window().maximize();
	}

	public static void launchUrl(String Url) {
		driver.get(Url);
	}

	public static void pageTitle() {
		String title = driver.getTitle();
		System.out.println(title);
	}

	public static void pageUrl() {
		String currentUrl = driver.getCurrentUrl();
		System.out.println(currentUrl);
	}

	public static void pageText(String txt, WebElement ele) {
		ele.sendKeys(txt);
	}

	public static void closeEntireBrowser() {
		driver.quit();
	}

	public static void clickBtn(WebElement ele) {
		ele.click();
	}

	public static void screenShot(String imgName) throws IOException {
		TakesScreenshot ts = (TakesScreenshot) driver;
		File image = ts.getScreenshotAs(OutputType.FILE);
		File f = new File("location+ imgName.png");
		FileUtils.copyFile(image, f);
	}

	public static Actions a;

	public static void moveTheCursor(WebElement targetWebElement) {
		a = new Actions(driver);
		a.moveToElement(targetWebElement).perform();
	}

	public static void dragDrop(WebElement dragWebElement, WebElement dropElement) {
		a = new Actions(driver);
		a.dragAndDrop(dragWebElement, dropElement).perform();
	}

	public static JavascriptExecutor js;

	public static void scrollThePage(WebElement targetWebElement) {
		js = (JavascriptExecutor) driver;
		WebElement element = driver.findElement(By.name("pass"));
		js.executeScript("arguments[0].scrollIntoView(false)", element);
	}

	// To read the Excel Data
	public static void excelRead(String sheetName, int rowNum, int cellNum) throws IOException {
		File f = new File("C:\\Users\\ELCOT\\eclipse-workspace\\MavenPractice\\Excel\\SampleDatas.xlsx.xlsx");
		FileInputStream fis = new FileInputStream(f);
		Workbook wb = new XSSFWorkbook(fis);
		Sheet mySheet = wb.getSheet("Data");
		Row r = mySheet.getRow(rowNum);
		Cell c = r.getCell(cellNum);
		int cellType = c.getCellType();

		String value = " ";
		if (cellType == 1) {

			String value1 = c.getStringCellValue();

			System.out.println(value1);

		} else if (DateUtil.isCellDateFormatted(c)) {

			Date dd = c.getDateCellValue();

			SimpleDateFormat s = new SimpleDateFormat("dd-mmm-yyyy");

			String value1 = s.format(dd);

			System.out.println(value);

		}

		else {

			double d = c.getNumericCellValue();

			long l = (long) d;

			String value2 = String.valueOf(l);

			System.out.println(value);

		}

	}

	// To write the Excel Data
	public static void createNewExcelFile(int rowNum, int cellNum, String newData) throws IOException {
		File f1 = new File("C:\\Users\\ELCOT\\eclipse-workspace\\Maveninstallation\\Excel\\newExcelFile.xlsx");
		Workbook w = new XSSFWorkbook();
		Sheet newSheet = w.createSheet("Datas");
		Row newRow = newSheet.createRow(0);
		Cell newCell = newRow.createCell(0);
		newCell.setCellValue("Selenium");
		FileOutputStream fos = new FileOutputStream(f1);
		w.write(fos);

	}

	public static void createCell(int rowNum, int cellNum, String newData) throws IOException {
		File f = new File("C:\\Users\\ELCOT\\eclipse-workspace\\Maveninstallation\\Excel\\newExcelFile.xlsx");
		FileInputStream fis = new FileInputStream(f);
		Workbook w = new XSSFWorkbook();
		Sheet s = w.getSheet("Datas");
		Row r = s.getRow(rowNum);
		Cell c = r.createCell(cellNum);
		c.setCellValue("newData");
		FileOutputStream fos = new FileOutputStream(f);
		w.write(fos);

	}

	public static void createRow(int crtRow, int crtCell, String newData) throws IOException {
		File f = new File("C:\\Users\\ELCOT\\eclipse-workspac\\Maveninstallation\\Excel\\newExcelFile.xlsx");
		FileInputStream fis = new FileInputStream(f);
		Workbook w = new XSSFWorkbook();
		Sheet s = w.createSheet("Datas");
		Row r = s.createRow(0);
		Cell c = r.createCell(0);
		c.setCellValue("Selenium");
		FileOutputStream fos = new FileOutputStream(f);
		w.write(fos);

	}

	public static void updateDataToParticularCell(int getRow, int getCell, String existingData, String writeNewData)
			throws IOException {
		File f = new File("C:\\Users\\ELCOT\\eclipse-workspace\\Maveninstallation\\Excel\\newExcelFile.xlsx");
		FileInputStream fis = new FileInputStream(f);
		Workbook wb = new XSSFWorkbook();
		Sheet s = wb.getSheet("Datas");
		Row r = s.getRow(0);
		Cell c = r.getCell(0);
		String str = c.getStringCellValue();

		if (str.equals(existingData)) {
			c.setCellValue(writeNewData);
		}
		FileOutputStream fos = new FileOutputStream(f);
		wb.write(fos);

	}

	@SuppressWarnings("unused")
	protected
	static void passText(String string, WebElement email) {

	}

}
